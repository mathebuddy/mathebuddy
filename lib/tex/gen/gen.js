/**
 * mathe:buddy - a gamified learning-app for higher math
 * (c) 2022-2023 by TH Koeln
 * Author: Andreas Schwenk contact@compiler-construction.com
 * Funded by: FREIRAUM 2022, Stiftung Innovation in der Hochschullehre
 * License: GPL-3.0-or-later
 */

let parse = require("svg-parser");
let fs = require("fs");

require("mathjax")
  .init({
    loader: { load: ["input/tex", "output/svg"] },
  })
  .then((MathJax) => {
    let src =
      "0123456789" +
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
      "abcdefghijklmnopqrstuvwxyz" +
      "\\text{ABCDEFGHIJKLMNOPQRSTUVWXYZ}" +
      "\\text{abcdefghijklmnopqrstuvwxyz}" +
      "\\int" +
      "\\sum" +
      "\\prod" +
      "\\to" +
      "\\{\\}" +
      "[]" +
      "()" +
      "." +
      "," +
      ":" +
      ";" +
      "+" +
      "-" +
      "=" +
      "\\infty" +
      "\\alpha\\beta\\gamma\\Gamma\\delta\\Delta\\epsilon\\varepsilon\\zeta\\eta\\theta\\vartheta\\Theta\\iota\\kappa\\lambda\\Lambda\\mu\\nu\\xi\\Xi\\pi\\Pi\\rho\\varrho\\sigma\\Sigma\\tau\\upsilon\\Upsilon\\phi\\varphi\\Phi\\chi\\psi\\Psi\\omega\\Omega" +
      "\\forall\\Re\\Im\\nabla\\exists\\partial\\nexists\\emptyset\\varnothing\\wp\\complement\\neg\\cdots\\square\\surd\\blacksquare\\triangle" +
      "\\times\\cdot\\div\\cap\\cup\\neq\\leq\\geq\\in\\perp\\notin\\subset\\simeq\\approx\\wedge\\vee\\oplus\\otimes\\Box\\boxtimes\\equiv\\cong" +
      "\\leftarrow\\Leftarrow\\rightarrow\\Rightarrow\\leftrightarrow\\rightleftharpoons\\uparrow\\downarrow\\Uparrow\\Downarrow\\Leftrightarrow\\Updownarrow\\mapsto\\longmapsto\\nearrow\\searrow\\swarrow\\nwarrow\\leftharpoonup\\rightharpoonup\\leftharpoondown\\rightharpoondown" +
      "\\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}" +
      "\\mathcal{ABCDEFGHIJKLMNOPQRSTUVWXYZ}";
    const svg = MathJax.startup.adaptor.outerHTML(
      MathJax.tex2svg(src, { display: true })
    );
    fs.writeFileSync("all.svg", svg);

    let output = {};

    let obj = parse.parse(svg);
    let defs = obj.children[0].children[0].children[0].children;
    for (let def of defs) {
      let id = def.properties["id"];
      let d = def.properties["d"];
      output[id] = d;
    }

    //outputFormatted = JSON.stringify(output, Object.keys(output).sort(), 2);
    //fs.writeFileSync("font.json", outputFormatted);

    var outputStr = "// this file was auto-generated by file 'gen/gen.js'\n";
    outputStr += "Map<String, String> fontDB = {\n";
    let keys = Object.keys(output).sort();
    for (let key of keys) {
      outputStr += '  "' + key + '": "' + output[key] + '",\n';
    }
    outputStr += "};\n";
    fs.writeFileSync("../src/font.dart", outputStr);

    let bp = 1337;
  })
  .catch((err) => console.log(err.message));
