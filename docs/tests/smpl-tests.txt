% ===============================================================
% SMPL TEST CASES
% ===============================================================
%
%   Format description:
%
%   - Distinct tests are separated by '---'.
%
%   - The pattern '>>> TYPE >>> VALUE >>> TERM' checks
%      (a) if the left-hand side has type TYPE
%      (b) if the left-hand side is numerically equivalent to VALUE
%      (c) if the left-hand sides stringified (and fully parenthesized)
%          term representation is equivalent to TERM (except white spaces).
%
%     NOTE: The part '>>> TERM' is optional.
%
% ===============================================================
% TODO: add tests that must fail
% TODO: exp, ...
% TODO: implicit "*"
% TODO: parenthesized terms
% TODO: vec / int, ..., mat / int, ...

% NOTE: irrational is ONLY used for constants (e.g. pi)
%       e.g. "2 pi" technically evaluates to "2*REAL(pi)", 
%             which is of type REAL
% ===============================================================


% ---WIP: term output---

%let z = -2 - 3i       >>> complex >>> (-2) + (-3)*i
%let z = 1/2 + 1/5i    >>> complex >>> 0.5 + 0.2*i


let f(x) = 3 x^2   >>> term >>> 3 x^2 >>> (3*(x^2))

% TODO:
% let f(x) = x^2
% let g(x) = f(x) + 5

let x = 3 + 4         >>> int >>>  7 >>> (3+4)
let y = x + 5         >>> int >>> 12 >>> (7+5)
let z = @x + 5        >>> int >>> 12 >>> ((3+4)+5)

let a = sin(pi/4)     >>> real >>> 0.7071067812 >>> sin((pi/4))
let b = @a            >>> real >>> 0.7071067812 >>> sin((pi/4))
let c = a             >>> real >>> 0.7071067812 >>> 0.7071067811865
let d = @a + 1        >>> real >>> 1.7071067812 >>> (sin((pi/4))+1)
let e = @@a + 1       >>> real >>> 1.7071067812 >>> ((sqrt(2)/2)+1)

let xxx = sin(pi/6)
let yyy = @@xxx       >>> rational >>> 1/2


%     x      numerical value of x
%     @x     term of x
%     @@x    optimized term of x

---
let _int = 3                   >>> int >>> 3
let _rat = 2/3                 >>> rational >>> 2/3
let _real = 3.14               >>> real >>> 3.14
let _irr = pi                  >>> irrational >>> pi
let _cmplx = 2 + 3i            >>> complex >>> 2+3i
let _vec = [1,2]               >>> vector >>> [1,2]
let _mat = [[1,2],[3,4]]       >>> matrix >>> [[1,2],[3,4]]
let _bool = true               >>> boolean >>> true

let z = 0

% == add ==
z = _int + _int         >>> int >>> 6
z = _int + _rat         >>> rational >>> 11/3
z = _int + _real        >>> real >>> 6.14
z = _int + _irr         >>> real >>> 6.1415926536
z = _int + _cmplx       >>> complex >>> 5+3i
z = _rat + _int         >>> rational >>> 11/3
z = _rat + _rat         >>> rational >>> 4/3
z = _rat + _real        >>> real >>> 3.8066666667
z = _rat + _irr         >>> real >>> 3.8082593203
z = _rat + _cmplx       >>> complex >>> 3i+8/3
z = _real + _int        >>> real >>> 6.14
z = _real + _rat        >>> real >>> 3.806666666666667
z = _real + _real       >>> real >>> 6.28
z = _real + _irr        >>> real >>> 6.2815926536
z = _real + _cmplx      >>> complex >>> 5.14+3i
z = _irr + _int         >>> real >>> 6.1415926536
z = _irr + _rat         >>> real >>> 3.8082593203
z = _irr + _real        >>> real >>> 6.2815926536
z = _irr + _irr         >>> real >>> 6.283185307179586
z = _irr + _cmplx       >>> complex >>> 3i+5.141592653589793
z = _cmplx + _int       >>> complex >>> 5+3i
z = _cmplx + _rat       >>> complex >>> 3i+8/3
z = _cmplx + _real      >>> complex >>> 5.14+3i
z = _cmplx + _irr       >>> complex >>> 3i+5.141592653589793
z = _cmplx + _cmplx     >>> complex >>> 4+6i
z = _vec + _vec         >>> vector >>> [2,4]
z = _mat + _mat         >>> matrix >>> [[2,4],[6,8]]

% == unary minus ==

z = - _int              >>> int >>> -3
z = - _rat              >>> rational >>> -2/3
z = - _real             >>> real >>> -3.14
z = - _irr              >>> real >>> -3.141592653589793
z = - _cmplx            >>> complex >>> -2-3i
z = - _vec              >>> vector >>> [-1,-2]
z = - _mat              >>> matrix >>> [[-1,-2],[-3,-4]]

% == subtract ==

% == add ==
z = _int - _int         >>> int >>> 0
z = _int - _rat         >>> rational >>> 7/3
z = _int - _real        >>> real >>> -0.14
z = _int - _irr         >>> real >>> -0.1415926536
z = _int - _cmplx       >>> complex >>> 1-3i
z = _rat - _int         >>> rational >>> -7/3
z = _rat - _rat         >>> int >>> 0
z = _rat - _real        >>> real >>> -2.4733333333
z = _rat - _irr         >>> real >>> -2.4749259869
z = _rat - _cmplx       >>> complex >>> 888
z = _real - _int        >>> real >>> 0.14
z = _real - _rat        >>> real >>> 2.4733333333
z = _real - _real       >>> int >>> 0
z = _real - _irr        >>> real >>> -0.00159265359
z = _real - _cmplx      >>> complex >>> 888
z = _irr - _int         >>> real >>> 0.1415926536
z = _irr - _rat         >>> real >>> 2.4749259869
z = _irr - _real        >>> real >>> 0.00159265359
z = _irr - _irr         >>> int >>> 0
z = _irr - _cmplx       >>> complex >>> 888
z = _cmplx - _int       >>> complex >>> 888
z = _cmplx - _rat       >>> complex >>> 888
z = _cmplx - _real      >>> complex >>> 888
z = _cmplx - _irr       >>> complex >>> 888
z = _cmplx - _cmplx     >>> complex >>> 888
z = _vec - _vec         >>> vector >>> [0,0]
z = _mat - _mat         >>> matrix >>> [[0,0],[0,0]]

% == multiply  ==
z = _int * _int         >>> int >>> 9
z = _int * _rat         >>> int >>> 2
z = _int * _real        >>> real >>> 9.42
z = _int * _irr         >>> real >>> 9.4247779608
z = _int * _complex     >>> complex >>> 888
z = _int * _vec         >>> vector >>> [3,6]
z = _int * _mat         >>> matrix >>> [[3,6],[9,12]]
z = _rat * _int         >>> int >>> 2
z = _rat * _rat         >>> rational >>> 4/9
z = _rat * _real        >>> real >>> 2.09333333333
z = _rat * _irr         >>> real >>> 2.09439510239
z = _rat * _complex     >>> complex >>> 888
z = _rat * _vec         >>> vector >>> [2/3,4/3]
z = _rat * _mat         >>> matrix >>> [[2/3,4/3],[2,8/3]]
z = _real * _int        >>> real >>> 9.42
z = _real * _rat        >>> real >>> 2.09333333333
z = _real * _real       >>> real >>> 9.8596
z = _real * _irr        >>> real >>> 9.8646009323
z = _real * _complex    >>> complex >>> 888
z = _real * _vec        >>> vector >>> [3.14,6.28]
z = _real * _mat        >>> matrix >>> [[3.14,6.28],[9.42,12.56]]
z = _irr * _int         >>> real >>> 9.4247779608
z = _irr * _rat         >>> real >>> 2.09439510239
z = _irr * _real        >>> real >>> 9.8646009323
z = _irr * _irr         >>> real >>> 9.8696044011
z = _irr * _complex     >>> complex >>> 888
z = _irr * _vec         >>> vector >>> [pi, 2 pi]
z = _irr * _mat         >>> matrix >>> [[pi, 2 pi],[3 pi, 4 pi]]
z = _cmplx * _int       >>> complex >>> 888
z = _cmplx * _rat       >>> complex >>> 888
z = _cmplx * _real      >>> complex >>> 888
z = _cmplx * _irr       >>> complex >>> 888
z = _cmplx * _cmplx     >>> complex >>> 888
z = _vec * _int         >>> vector >>> [3, 6]
z = _vec * _rat         >>> vector >>> [2/3, 4/3]
z = _vec * _real        >>> vector >>> [3.14, 6.28]
z = _vec * _irr         >>> vector >>> [pi, 2 pi]
z = _vec * _complex     >>> complex >>> 888
z = _mat * _mat         >>> matrix >>> [[7,10],[15,22]]

% == divide ==
% TODO

% == pow ==
% TODO  (must reimplement pow!!)

% TODO _mat^T

% == logical operators ==
z = false && false      >>> boolean >>> false
z = false && true       >>> boolean >>> false
z = true && false       >>> boolean >>> false
z = true && true        >>> boolean >>> true
z = false || false      >>> boolean >>> false
z = false || true       >>> boolean >>> true
z = true || false       >>> boolean >>> true
z = true || true        >>> boolean >>> true
z = !false                        >>> boolean >>> true
z = !true                         >>> boolean >>> false
z = !((true && false) || true)    >>> boolean >>> false

---

let f = floor(3.14)    >>> int >>> 3
f = floor([1.1, 2.5])  >>> vector >>> [1,2]
f = floor([[1.1, 2.2],[3.3,4.4]])  >>> matrix >>> [[1,2],[3,4]]
let c = ceil(3.14)      >>> int >>> 4
let a = round(3.14)     >>> int >>> 3
a = round(2.71)         >>> int >>> 3

---

let y1 = sin(0)          >>> int >>> 0
let y2 = sin(pi/4)       >>> real >>> sqrt(2)/2


!STOP

% TODO: use "..." for expected term values

let x1 = sin(pi/6)        >>> real >>> 0.5
let y() = x1 + 5          >>> term >>> 0.5 + 5
y() = @x1 + 5             >>> term >>> sin(pi/6) + 5
y() = simplify(@x1) + 5   >>> term >>> 1/2 + 5
y() = simplify(@x1 + 5)   >>> term >>> 11/2

let x2 = sin(pi/3)        >>> real >>> 0.8660254038
y() = @x2 + 5             >>> term >>> sin(pi/3) + 5
y() = simplify(@x2) + 5   >>> term >>> sqrt(3)/2 + 5

---

let z = {20, 10, 30+1}  >>> set >>> {10,20,31}
let w = len(z)          >>> int >>> 3
let m1 = min(z)         >>> int >>> 10
let m2 = max(z)         >>> int >>> 31

% TODO: add, remove, elements...

---

let z = 2 - 3i*2       >>> complex >>> 2-6i
let w = 2z             >>> complex >>> 4-12i
let r = real(w)        >>> int >>> 4
let i = imag(w)        >>> int >>> -12

---

let x = 3 > 5       >>> boolean >>> false
let y = 5 > 2       >>> boolean >>> true
% TODO: >, >=, <=, ==, != for all types, ...

---

let k = 2              >>> int >>> 2
while k > 0 {
  k = k - 1
}
let q = k              >>> int >>> 0

---

let x = 3
let y = 0
if x == 3 {
  y = 1
}
let output = y     >>> int >>> 1
% TODO: else

---

let a = 4
let f(x) = a x^2 + 1
let y = f(5)

!STOP

---

let f(x) = x^2        >>> term >>> x^2
let y = f(5)          >>> int >>> 25

let g(x) = @f + 1     >>> term >>> x^2+1 + 888

% TODO: f(x,y) ...

!STOP

---

let f(x) = 2x^(2+1)+2+1   >>> term >>> "2x^3+1"
let y = f(3)              >>> int >>> 55

f(x) = 0         >>> term >>> "0"
f(x) = x         >>> term >>> "x"
f(x) = x+x       >>> term >>> "2x"
f(x) = (2x)+3    >>> term >>> "2x+3"
let a = 5
f(x) = ax        >>> term >>> 5*x

---

let x = [1,2,3]       >>> vector >>> [1,2,3]
let y = 2x            >>> vector >>> [2,4,6]

---

let A = [[1,2],[3,4],[5,6]]
let m = rows(A)       >>> int >>> 3
let n = cols(A)       >>> int >>> 2
A = [[1,2],[3,4]]
let d = det(A)        >>> int >>> -2

---

let A = zeros(3)      >>> matrix >>> [[0,0,0],[0,0,0],[0,0,0]]
A = eye(3)            >>> matrix >>> [[1,0,0],[0,1,0],[0,0,1]]

---

let f = fac(2+1)        >>> int >>> 1*2*3

---
