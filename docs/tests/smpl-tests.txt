% ===============================================================
% SMPL TEST CASES
% ===============================================================
%
%   Format description:
%
%   - Distinct tests are separated by '---'.
%
%   - Pattern '>>> TYPE >>> VALUE' checks
%      whether the left-hand side has type TYPE
%      and whether it is numerically equivalent to VALUE.
%
%   - Pattern '>>> TYPE >>> "VALUE"' checks
%      whether the left-hand side has type TYPE
%      and whether its stringified representation is 
%      (except white spaces) equivalent to VALUE.
%        
% ===============================================================
% TODO: add tests that must fail
% ===============================================================

let x = 3               >>> int >>> 3
x = 2/3                 >>> rational >>> 2/3
x = 3.14                >>> real >>> 3.14
x = [1,2,3]             >>> vector >>> [1,2,3]
x = [[1,2,3],[1,2,3]]   >>> matrix >>> [[1,2,3],[1,2,3]]
x = true                >>> boolean >>> true
x = false               >>> boolean >>> false

% TODO: boolean operators

---

let x = 1 + 1/2        >>> rational >>> 3/2
x = x + 1              >>> rational >>> 5/2
let y = x              >>> rational >>> 5/2

---

let f = floor(3.14)    >>> int >>> 3
f = floor([1.1, 2.5])  >>> vector >>> [1,2]
f = floor([[1.1, 2.2],[3.3,4.4]])  >>> matrix >>> [[1, 2],[3,4]]
let c = ceil(3.14)      >>> int >>> 4
let a = round(3.14)     >>> int >>> 3
a = round(2.71)         >>> int >>> 3

---

let x = sin(0)         >>> int >>> 0

---

let z = {20, 10, 30+1}  >>> set >>> {10,20,31}
let w = len(z)          >>> int >>> 3
let m1 = min(z)         >>> int >>> 10
let m2 = max(z)         >>> int >>> 31

---

let z = 2 - 3i*2       >>> complex >>> 2-6i
let w = 2z             >>> complex >>> 4-12i
let r = real(w)        >>> int >>> 4
let i = imag(w)        >>> int >>> -12

---

let x = 3 > 5       >>> boolean >>> false
let y = 5 > 2       >>> boolean >>> true
% TODO: >, >=, <=, ==, != for all types, ...

---

let k = 2              >>> int >>> 2
while k > 0 {
  k = k - 1
}
let q = k              >>> int >>> 0

---

let x = 3
let y = 0
if x == 3 {
  y = 1
}
let output = y     >>> int >>> 1
% TODO: else

---

let f(x) = x^2
let g(x) = @f + 1     >>> term >>> x^2+1 + 888

---

let f(x) = 2x^(2+1)+2+1   >>> term >>> "2x^3+1"
let y = f(3)              >>> int >>> 55

f(x) = 0         >>> term >>> "0"
f(x) = x         >>> term >>> "x"
f(x) = x+x       >>> term >>> "2x"
f(x) = (2x)+3    >>> term >>> "2x+3"
let a = 5
f(x) = ax        >>> term >>> 5*x

---

let x = [1,2,3]       >>> vector >>> [1,2,3]
let y = 2x            >>> vector >>> [2,4,6]

---

let A = [[1,2],[3,4],[5,6]]
let m = rows(A)       >>> int >>> 3
let n = cols(A)       >>> int >>> 2
A = [[1,2],[3,4]]
let d = det(A)        >>> int >>> -2

---

let A = zeros(3)      >>> matrix >>> [[0,0,0],[0,0,0],[0,0,0]]
A = eye(3)            >>> matrix >>> [[1,0,0],[0,1,0],[0,0,1]]

---

let f = fac(2+1)        >>> int >>> 1*2*3

---
